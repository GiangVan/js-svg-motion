{"version":3,"sources":["ng://svg-motion/line-svg-motion.ts"],"names":["LineSvgMotion","this","lineAnimations","prototype","getLineAnimations","drawLineGroupToVolume","dAttribute","element","volume","reverse","pointGroups","generatePointGroups","i","length","drawLineToVolume","animateLineGroup","_a","finishCallback","_b","time","_c","step","_d","isReversed","_e","mode","toUpperCase","lineAnimationId","pushNewLineAnimation","handleAnimationCollapseMode","handleAnimationLoadingMode","handleAnimationLoading2Mode","handleAnimationLoading3Mode","handleAnimationLoading4Mode","handleAnimationNormalMode","calcMotionTrigonometricEquations","x","Math","sin","PI","pow","generateLineAnimationId","Symbol","removeLineAnimation","id","index","indexOf","splice","existLineAnimation","key","push","animationId","_this","speed","recursiveAnimationLineGroup","currentStep","isExpand","setTimeout","pointGroupStrings","split","pointStrings","j","point","parseFloat","undefined","alert","countOccurrences","text","search","getRangeOf","no","startIndex","n","getPointsDistance","point1","point2","sqrt","getLineLength","pointGroup","roundPoint","round","Number","EPSILON","changePointGroupAtLength","currentLength","newPointGroup","currentLineLength","betweenLengthRatio","getPointGroupStringMissing","pointGroupString","pointGroupNo","pointGroupNum","pointGroupMissingNum","pointGroupMissingString","length_1","workRange","lineString","substring","setAttribute"],"mappings":"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","sourcesContent":["\nexport class LineSvgMotion {\n\tprotected lineAnimations: symbol[] = [];\n\n\tconstructor() { }\n\n\tpublic getLineAnimations(): symbol[] {\n\t\treturn this.lineAnimations;\n\t}\n\n\tpublic drawLineGroupToVolume(dAttribute: string, element: HTMLElement, volume: number, reverse: boolean = false): string {\n\t\tconst pointGroups: number[][][] = this.generatePointGroups(dAttribute);\n\n\t\tfor (let i = 0; i < pointGroups.length; i++) {\n\t\t\tif (reverse) {\n\t\t\t\tpointGroups[i] = pointGroups[i].reverse();\n\t\t\t}\n\n\t\t\tdAttribute = this.drawLineToVolume(pointGroups[i], i + 1, dAttribute, element, volume);\n\t\t}\n\n\t\treturn dAttribute;\n\t}\n\n\tpublic animateLineGroup(\n\t\tdAttribute: string,\n\t\telement: HTMLElement,\n\t\t{\n\t\t\ttime: time = 1000,\n\t\t\tstep: step = 100,\n\t\t\tisReversed: isReversed = false,\n\t\t\tmode: mode = 'EXPAND'\n\t\t},\n\t\tfinishCallback: () => void = null\n\t): symbol {\n\t\t\n\t\tmode = mode.toUpperCase();\n\t\tconst lineAnimationId: symbol = this.pushNewLineAnimation();\n\n\t\tswitch (mode) {\n\t\t\tcase 'COLLAPSE':\n\t\t\t\tthis.handleAnimationCollapseMode(lineAnimationId, dAttribute, element, step, time, isReversed, finishCallback);\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOADING':\n\t\t\t\tthis.handleAnimationLoadingMode(lineAnimationId, dAttribute, element, step, time, isReversed);\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOADING2':\n\t\t\t\tthis.handleAnimationLoading2Mode(lineAnimationId, dAttribute, element, step, time, isReversed);\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOADING3':\n\t\t\t\tthis.handleAnimationLoading3Mode(lineAnimationId, dAttribute, element, step, time, isReversed);\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOADING4':\n\t\t\t\tthis.handleAnimationLoading4Mode(lineAnimationId, dAttribute, element, step, time, isReversed);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.handleAnimationNormalMode(lineAnimationId, dAttribute, element, step, time, isReversed, finishCallback);\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn lineAnimationId;\n\t}\n\n\n\tprotected calcMotionTrigonometricEquations(x: number): number {\n\t\treturn Math.sin((Math.PI / 2) * Math.pow(x, 6));\n\t}\n\n\n\tprotected generateLineAnimationId(): symbol {\n\t\treturn Symbol();\n\t}\n\n\tprotected removeLineAnimation(id: symbol) {\n\t\tconst index: number = this.lineAnimations.indexOf(id);\n\t\tif (index !== -1) {\n\t\t\tthis.lineAnimations.splice(index, 1);\n\t\t}\n\t}\n\n\tprotected existLineAnimation(id: symbol) {\n\t\treturn this.lineAnimations.indexOf(id) !== -1;\n\t}\n\n\tprotected pushNewLineAnimation(): symbol {\n\t\tconst key: symbol = this.generateLineAnimationId();\n\n\t\tthis.lineAnimations.push(key);\n\n\t\treturn key;\n\t}\n\n\tprotected handleAnimationLoadingMode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean) {\n\t\tconst speed: number = time / step;\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, () => {\n\t\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, !isReversed, () => {\n\t\t\t\tthis.handleAnimationLoadingMode(animationId, dAttribute, element, step, time, isReversed);\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected handleAnimationLoading2Mode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean) {\n\t\tconst speed: number = time / step;\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, () => {\n\t\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, isReversed, () => {\n\t\t\t\tthis.handleAnimationLoading2Mode(animationId, dAttribute, element, step, time, isReversed);\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected handleAnimationLoading3Mode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean) {\n\t\tconst speed: number = time / step;\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, !isReversed, () => {\n\t\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, () => {\n\t\t\t\tthis.handleAnimationLoading3Mode(animationId, dAttribute, element, step, time, isReversed);\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected handleAnimationLoading4Mode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean) {\n\t\tconst speed: number = time / step;\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, isReversed, () => {\n\t\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, !isReversed, () => {\n\t\t\t\tthis.handleAnimationLoading4Mode(animationId, dAttribute, element, step, time, isReversed);\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected handleAnimationCollapseMode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean, finishCallback?: () => void) {\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, (time / step), 100, false, isReversed, finishCallback);\n\t}\n\n\tprotected handleAnimationNormalMode(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, time: number, isReversed: boolean, finishCallback?: () => void) {\n\t\tthis.recursiveAnimationLineGroup(animationId, dAttribute, element, step, (time / step), 0, true, isReversed, finishCallback);\n\t}\n\n\tprotected recursiveAnimationLineGroup(animationId: symbol, dAttribute: string, element: HTMLElement, step: number, speed: number, currentStep: number, isExpand, isReversed: boolean, finishCallback?: () => void) {\n\t\tif (this.existLineAnimation(animationId)) {\n\t\t\tthis.drawLineGroupToVolume(dAttribute, element, 100 * this.calcMotionTrigonometricEquations(currentStep / step), isReversed);\n\n\t\t\tif (\n\t\t\t\t(isExpand && currentStep === step) ||\n\t\t\t\t(!isExpand && currentStep === 0)\n\t\t\t) {\n\t\t\t\tif (finishCallback != null) {\n\t\t\t\t\tfinishCallback();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isExpand) {\n\t\t\t\t\tcurrentStep++;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentStep--;\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => (this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, currentStep, isExpand, isReversed, finishCallback))\n\t\t\t\t\t, speed\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected generatePointGroups(dAttribute: string): null | number[][][] {\n\t\tconst pointGroupStrings: string[] = dAttribute.split(\"M\");\n\t\tconst pointGroups: number[][][] = [];\n\n\t\tif (pointGroupStrings[0] === \"\") {\n\t\t\tfor (let i = 1; i < pointGroupStrings.length; i++) {\n\t\t\t\tconst pointStrings = pointGroupStrings[i].split(\"L\");\n\n\t\t\t\tfor (let j = 0; j < pointStrings.length; j++) {\n\t\t\t\t\tconst point = [\n\t\t\t\t\t\tparseFloat(pointStrings[j].split(\",\")[0]),\n\t\t\t\t\t\tparseFloat(pointStrings[j].split(\",\")[1]),\n\t\t\t\t\t];\n\t\t\t\t\tif (pointGroups[i - 1] === undefined) {\n\t\t\t\t\t\tpointGroups[i - 1] = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tpointGroups[i - 1][pointGroups[i - 1].length] = point;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\talert(\"not found M\");\n\t\t}\n\n\t\treturn pointGroups.length > 0 ? pointGroups : null;\n\t}\n\n\tprotected countOccurrences(text: string, search: string): number {\n\t\treturn text.split(search).length - 1;\n\t}\n\n\tprotected getRangeOf(text: string, search: string, no: number): number[] | null {\n\t\tif (this.countOccurrences(text, search) >= no) {\n\t\t\tlet startIndex: number = 0;\n\t\t\tlet endIndex: number = 0;\n\t\t\tlet n: number = 0;\n\n\t\t\twhile (n < no) {\n\t\t\t\tstartIndex = text.indexOf(search, startIndex) + search.length;\n\t\t\t\tn++;\n\t\t\t}\n\n\t\t\tendIndex = (text.indexOf(search, startIndex) === -1) ? text.length : text.indexOf(search, startIndex);\n\n\t\t\treturn [\n\t\t\t\tstartIndex,\n\t\t\t\tendIndex\n\t\t\t];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprotected getPointsDistance(point1: number[], point2: number[]): number {\n\t\treturn Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));\n\t}\n\n\tprotected getLineLength(pointGroup: number[][]): number {\n\t\tlet length: number = 0.0;\n\n\t\tfor (let i = 1; i < pointGroup.length; i++) {\n\t\t\tlength += this.getPointsDistance(pointGroup[i - 1], pointGroup[i]);\n\t\t}\n\n\t\treturn length;\n\t}\n\n\tprotected roundPoint(point: number[]): number[] {\n\t\tpoint[0] = Math.round((point[0] + Number.EPSILON) * 1000) / 1000;\n\t\tpoint[1] = Math.round((point[1] + Number.EPSILON) * 1000) / 1000;\n\n\t\treturn point;\n\t}\n\n\tprotected changePointGroupAtLength(pointGroup: number[][], length: number): number[][] {\n\t\tlet currentLength: number = 0;\n\t\tconst newPointGroup: number[][] = [pointGroup[0]];\n\n\t\tfor (let i = 1; i < pointGroup.length; i++) {\n\t\t\tconst currentLineLength = this.getPointsDistance(pointGroup[i - 1], pointGroup[i]);\n\t\t\tcurrentLength += currentLineLength;\n\t\t\tnewPointGroup.push(pointGroup[i]);\n\n\t\t\tif (currentLength >= length) {\n\t\t\t\tconst newLineLength = length + currentLineLength - currentLength;\n\t\t\t\tconst betweenLengthRatio = newLineLength / currentLineLength;\n\n\t\t\t\tnewPointGroup[i] = this.roundPoint([\n\t\t\t\t\tpointGroup[i - 1][0] + ((pointGroup[i][0] - pointGroup[i - 1][0]) * betweenLengthRatio),\n\t\t\t\t\tpointGroup[i - 1][1] + ((pointGroup[i][1] - pointGroup[i - 1][1]) * betweenLengthRatio)\n\t\t\t\t]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn newPointGroup;\n\t}\n\n\tprotected getPointGroupStringMissing(pointGroupString: string, pointGroupNo: number): string {\n\t\tconst pointGroupNum: number = this.countOccurrences(pointGroupString, 'M');\n\t\tlet pointGroupMissingNum: number = 0;\n\t\tlet pointGroupMissingString: string = '';\n\n\t\tif (pointGroupNo - pointGroupNum > 1) {\n\t\t\tpointGroupMissingNum = pointGroupNo - pointGroupNum - 1;\n\t\t}\n\n\t\tfor (let i = 0; i < pointGroupMissingNum; i++) {\n\t\t\tpointGroupMissingString += 'M0,0';\n\t\t}\n\n\t\treturn pointGroupMissingString;\n\t}\n\n\tprotected drawLineToVolume(pointGroup: number[][], pointGroupNo: number, dAttribute: string, element: HTMLElement, volume: number): string {\n\t\tif (volume >= 0 && volume <= 100) {\n\t\t\tconst length: number = this.getLineLength(pointGroup) / 100 * volume;\n\t\t\tconst newPointGroup: number[][] = this.changePointGroupAtLength(pointGroup, length);\n\t\t\tlet workRange: number[] = this.getRangeOf(dAttribute, 'M', pointGroupNo);\n\t\t\tlet lineString: string = '';\n\n\t\t\tfor (let i = 0; i < newPointGroup.length; i++) {\n\t\t\t\tlineString += lineString == '' ? '' : 'L';\n\t\t\t\tlineString += `${newPointGroup[i][0]},${newPointGroup[i][1]}`;\n\t\t\t}\n\n\t\t\tif (workRange === null) {\n\t\t\t\tdAttribute = `${dAttribute}${this.getPointGroupStringMissing(dAttribute, pointGroupNo)}M${lineString}`;\n\t\t\t} else {\n\t\t\t\tdAttribute = dAttribute.substring(0, workRange[0]) + lineString + dAttribute.substring(workRange[1], dAttribute.length);\n\t\t\t}\n\n\t\t\telement.setAttribute('d', dAttribute);\n\t\t\treturn dAttribute;\n\t\t}\n\t}\n}\n"]}