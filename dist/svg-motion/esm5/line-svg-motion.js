var LineSvgMotion = /** @class */ (function () {
    function LineSvgMotion() {
        this.lineAnimations = [];
    }
    LineSvgMotion.prototype.getLineAnimations = function () {
        return this.lineAnimations;
    };
    LineSvgMotion.drawLineGroupToVolume = function (dAttribute, element, volume, reverse) {
        if (reverse === void 0) { reverse = false; }
        var pointGroups = this.generatePointGroups(dAttribute);
        for (var i = 0; i < pointGroups.length; i++) {
            if (reverse) {
                pointGroups[i] = pointGroups[i].reverse();
            }
            dAttribute = this.drawLineToVolume(pointGroups[i], i + 1, dAttribute, element, volume);
        }
        return dAttribute;
    };
    LineSvgMotion.prototype.animateLineGroup = function (dAttribute, element, _a, finishCallback) {
        var _b = _a.time, time = _b === void 0 ? 1000 : _b, _c = _a.step, step = _c === void 0 ? 100 : _c, _d = _a.isReversed, isReversed = _d === void 0 ? false : _d, _e = _a.mode, mode = _e === void 0 ? 'EXPAND' : _e;
        if (finishCallback === void 0) { finishCallback = null; }
        mode = mode.toUpperCase();
        var lineAnimationId = this.pushNewLineAnimation();
        switch (mode) {
            case 'COLLAPSE':
                this.handleAnimationCollapseMode(lineAnimationId, dAttribute, element, step, time, isReversed, finishCallback);
                break;
            case 'LOADING':
                this.handleAnimationLoadingMode(lineAnimationId, dAttribute, element, step, time, isReversed);
                break;
            case 'LOADING2':
                this.handleAnimationLoading2Mode(lineAnimationId, dAttribute, element, step, time, isReversed);
                break;
            case 'LOADING3':
                this.handleAnimationLoading3Mode(lineAnimationId, dAttribute, element, step, time, isReversed);
                break;
            case 'LOADING4':
                this.handleAnimationLoading4Mode(lineAnimationId, dAttribute, element, step, time, isReversed);
                break;
            default:
                this.handleAnimationNormalMode(lineAnimationId, dAttribute, element, step, time, isReversed, finishCallback);
                break;
        }
        return lineAnimationId;
    };
    LineSvgMotion.prototype.calcMotionTrigonometricEquations = function (x) {
        return Math.sin((Math.PI / 2) * Math.pow(x, 6));
    };
    LineSvgMotion.prototype.generateLineAnimationId = function () {
        return Symbol();
    };
    LineSvgMotion.prototype.removeLineAnimation = function (id) {
        var index = this.lineAnimations.indexOf(id);
        if (index !== -1) {
            this.lineAnimations.splice(index, 1);
        }
    };
    LineSvgMotion.prototype.existLineAnimation = function (id) {
        return this.lineAnimations.indexOf(id) !== -1;
    };
    LineSvgMotion.prototype.pushNewLineAnimation = function () {
        var key = this.generateLineAnimationId();
        this.lineAnimations.push(key);
        return key;
    };
    LineSvgMotion.prototype.handleAnimationLoadingMode = function (animationId, dAttribute, element, step, time, isReversed) {
        var _this = this;
        var speed = time / step;
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, function () {
            _this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, !isReversed, function () {
                _this.handleAnimationLoadingMode(animationId, dAttribute, element, step, time, isReversed);
            });
        });
    };
    LineSvgMotion.prototype.handleAnimationLoading2Mode = function (animationId, dAttribute, element, step, time, isReversed) {
        var _this = this;
        var speed = time / step;
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, function () {
            _this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, isReversed, function () {
                _this.handleAnimationLoading2Mode(animationId, dAttribute, element, step, time, isReversed);
            });
        });
    };
    LineSvgMotion.prototype.handleAnimationLoading3Mode = function (animationId, dAttribute, element, step, time, isReversed) {
        var _this = this;
        var speed = time / step;
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, !isReversed, function () {
            _this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, isReversed, function () {
                _this.handleAnimationLoading3Mode(animationId, dAttribute, element, step, time, isReversed);
            });
        });
    };
    LineSvgMotion.prototype.handleAnimationLoading4Mode = function (animationId, dAttribute, element, step, time, isReversed) {
        var _this = this;
        var speed = time / step;
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 100, false, isReversed, function () {
            _this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, 0, true, !isReversed, function () {
                _this.handleAnimationLoading4Mode(animationId, dAttribute, element, step, time, isReversed);
            });
        });
    };
    LineSvgMotion.prototype.handleAnimationCollapseMode = function (animationId, dAttribute, element, step, time, isReversed, finishCallback) {
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, (time / step), 100, false, isReversed, finishCallback);
    };
    LineSvgMotion.prototype.handleAnimationNormalMode = function (animationId, dAttribute, element, step, time, isReversed, finishCallback) {
        this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, (time / step), 0, true, isReversed, finishCallback);
    };
    LineSvgMotion.prototype.recursiveAnimationLineGroup = function (animationId, dAttribute, element, step, speed, currentStep, isExpand, isReversed, finishCallback) {
        var _this = this;
        if (this.existLineAnimation(animationId)) {
            LineSvgMotion.drawLineGroupToVolume(dAttribute, element, 100 * this.calcMotionTrigonometricEquations(currentStep / step), isReversed);
            if ((isExpand && currentStep === step) ||
                (!isExpand && currentStep === 0)) {
                if (finishCallback != null) {
                    finishCallback();
                }
            }
            else {
                if (isExpand) {
                    currentStep++;
                }
                else {
                    currentStep--;
                }
                setTimeout(function () { return (_this.recursiveAnimationLineGroup(animationId, dAttribute, element, step, speed, currentStep, isExpand, isReversed, finishCallback)); }, speed);
            }
        }
    };
    LineSvgMotion.generatePointGroups = function (dAttribute) {
        var pointGroupStrings = dAttribute.split("M");
        var pointGroups = [];
        if (pointGroupStrings[0] === "") {
            for (var i = 1; i < pointGroupStrings.length; i++) {
                var pointStrings = pointGroupStrings[i].split("L");
                for (var j = 0; j < pointStrings.length; j++) {
                    var point = [
                        parseFloat(pointStrings[j].split(",")[0]),
                        parseFloat(pointStrings[j].split(",")[1]),
                    ];
                    if (pointGroups[i - 1] === undefined) {
                        pointGroups[i - 1] = [];
                    }
                    pointGroups[i - 1][pointGroups[i - 1].length] = point;
                }
            }
        }
        else {
            alert("not found M");
        }
        return pointGroups.length > 0 ? pointGroups : null;
    };
    LineSvgMotion.countOccurrences = function (text, search) {
        return text.split(search).length - 1;
    };
    LineSvgMotion.getRangeOf = function (text, search, no) {
        if (this.countOccurrences(text, search) >= no) {
            var startIndex = 0;
            var endIndex = 0;
            var n = 0;
            while (n < no) {
                startIndex = text.indexOf(search, startIndex) + search.length;
                n++;
            }
            endIndex = (text.indexOf(search, startIndex) === -1) ? text.length : text.indexOf(search, startIndex);
            return [
                startIndex,
                endIndex
            ];
        }
        else {
            return null;
        }
    };
    LineSvgMotion.getPointsDistance = function (point1, point2) {
        return Math.sqrt(Math.pow(point2[0] - point1[0], 2) + Math.pow(point2[1] - point1[1], 2));
    };
    LineSvgMotion.getLineLength = function (pointGroup) {
        var length = 0.0;
        for (var i = 1; i < pointGroup.length; i++) {
            length += this.getPointsDistance(pointGroup[i - 1], pointGroup[i]);
        }
        return length;
    };
    LineSvgMotion.roundPoint = function (point) {
        point[0] = Math.round((point[0] + Number.EPSILON) * 1000) / 1000;
        point[1] = Math.round((point[1] + Number.EPSILON) * 1000) / 1000;
        return point;
    };
    LineSvgMotion.changePointGroupAtLength = function (pointGroup, length) {
        var currentLength = 0;
        var newPointGroup = [pointGroup[0]];
        for (var i = 1; i < pointGroup.length; i++) {
            var currentLineLength = this.getPointsDistance(pointGroup[i - 1], pointGroup[i]);
            currentLength += currentLineLength;
            newPointGroup.push(pointGroup[i]);
            if (currentLength >= length) {
                var newLineLength = length + currentLineLength - currentLength;
                var betweenLengthRatio = newLineLength / currentLineLength;
                newPointGroup[i] = this.roundPoint([
                    pointGroup[i - 1][0] + ((pointGroup[i][0] - pointGroup[i - 1][0]) * betweenLengthRatio),
                    pointGroup[i - 1][1] + ((pointGroup[i][1] - pointGroup[i - 1][1]) * betweenLengthRatio)
                ]);
                break;
            }
        }
        return newPointGroup;
    };
    LineSvgMotion.getPointGroupStringMissing = function (pointGroupString, pointGroupNo) {
        var pointGroupNum = this.countOccurrences(pointGroupString, 'M');
        var pointGroupMissingNum = 0;
        var pointGroupMissingString = '';
        if (pointGroupNo - pointGroupNum > 1) {
            pointGroupMissingNum = pointGroupNo - pointGroupNum - 1;
        }
        for (var i = 0; i < pointGroupMissingNum; i++) {
            pointGroupMissingString += 'M0,0';
        }
        return pointGroupMissingString;
    };
    LineSvgMotion.drawLineToVolume = function (pointGroup, pointGroupNo, dAttribute, element, volume) {
        if (volume >= 0 && volume <= 100) {
            var length_1 = this.getLineLength(pointGroup) / 100 * volume;
            var newPointGroup = this.changePointGroupAtLength(pointGroup, length_1);
            var workRange = this.getRangeOf(dAttribute, 'M', pointGroupNo);
            var lineString = '';
            for (var i = 0; i < newPointGroup.length; i++) {
                lineString += lineString == '' ? '' : 'L';
                lineString += newPointGroup[i][0] + "," + newPointGroup[i][1];
            }
            if (workRange === null) {
                dAttribute = "" + dAttribute + this.getPointGroupStringMissing(dAttribute, pointGroupNo) + "M" + lineString;
            }
            else {
                dAttribute = dAttribute.substring(0, workRange[0]) + lineString + dAttribute.substring(workRange[1], dAttribute.length);
            }
            element.setAttribute('d', dAttribute);
            return dAttribute;
        }
    };
    return LineSvgMotion;
}());
export { LineSvgMotion };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1zdmctbW90aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc3ZnLW1vdGlvbi8iLCJzb3VyY2VzIjpbImxpbmUtc3ZnLW1vdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtJQUdDO1FBRlUsbUJBQWMsR0FBYSxFQUFFLENBQUM7SUFFeEIsQ0FBQztJQUVWLHlDQUFpQixHQUF4QjtRQUNDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM1QixDQUFDO0lBRWEsbUNBQXFCLEdBQW5DLFVBQW9DLFVBQWtCLEVBQUUsT0FBb0IsRUFBRSxNQUFjLEVBQUUsT0FBd0I7UUFBeEIsd0JBQUEsRUFBQSxlQUF3QjtRQUNySCxJQUFNLFdBQVcsR0FBaUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXZFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQUksT0FBTyxFQUFFO2dCQUNaLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDMUM7WUFFRCxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdkY7UUFFRCxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRU0sd0NBQWdCLEdBQXZCLFVBQ0MsVUFBa0IsRUFDbEIsT0FBb0IsRUFDcEIsRUFLQyxFQUNELGNBQWlDO1lBTGhDLFlBQWlCLEVBQWpCLGdDQUFpQixFQUNqQixZQUFnQixFQUFoQiwrQkFBZ0IsRUFDaEIsa0JBQThCLEVBQTlCLHVDQUE4QixFQUM5QixZQUFxQixFQUFyQixvQ0FBcUI7UUFFdEIsK0JBQUEsRUFBQSxxQkFBaUM7UUFHakMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMxQixJQUFNLGVBQWUsR0FBVyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUU1RCxRQUFRLElBQUksRUFBRTtZQUNiLEtBQUssVUFBVTtnQkFDZCxJQUFJLENBQUMsMkJBQTJCLENBQUMsZUFBZSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7Z0JBQy9HLE1BQU07WUFFUCxLQUFLLFNBQVM7Z0JBQ2IsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQzlGLE1BQU07WUFFUCxLQUFLLFVBQVU7Z0JBQ2QsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQy9GLE1BQU07WUFFUCxLQUFLLFVBQVU7Z0JBQ2QsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQy9GLE1BQU07WUFFUCxLQUFLLFVBQVU7Z0JBQ2QsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQy9GLE1BQU07WUFFUDtnQkFDQyxJQUFJLENBQUMseUJBQXlCLENBQUMsZUFBZSxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7Z0JBQzdHLE1BQU07U0FDUDtRQUVELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFHUyx3REFBZ0MsR0FBMUMsVUFBMkMsQ0FBUztRQUNuRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUdTLCtDQUF1QixHQUFqQztRQUNDLE9BQU8sTUFBTSxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVTLDJDQUFtQixHQUE3QixVQUE4QixFQUFVO1FBQ3ZDLElBQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyQztJQUNGLENBQUM7SUFFUywwQ0FBa0IsR0FBNUIsVUFBNkIsRUFBVTtRQUN0QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFUyw0Q0FBb0IsR0FBOUI7UUFDQyxJQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFUyxrREFBMEIsR0FBcEMsVUFBcUMsV0FBbUIsRUFBRSxVQUFrQixFQUFFLE9BQW9CLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxVQUFtQjtRQUFuSixpQkFPQztRQU5BLElBQU0sS0FBSyxHQUFXLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDcEcsS0FBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRTtnQkFDeEcsS0FBSSxDQUFDLDBCQUEwQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDM0YsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFUyxtREFBMkIsR0FBckMsVUFBc0MsV0FBbUIsRUFBRSxVQUFrQixFQUFFLE9BQW9CLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxVQUFtQjtRQUFwSixpQkFPQztRQU5BLElBQU0sS0FBSyxHQUFXLElBQUksR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDcEcsS0FBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUU7Z0JBQ3ZHLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRVMsbURBQTJCLEdBQXJDLFVBQXNDLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxPQUFvQixFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsVUFBbUI7UUFBcEosaUJBT0M7UUFOQSxJQUFNLEtBQUssR0FBVyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUU7WUFDeEcsS0FBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7Z0JBQ3BHLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRVMsbURBQTJCLEdBQXJDLFVBQXNDLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxPQUFvQixFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsVUFBbUI7UUFBcEosaUJBT0M7UUFOQSxJQUFNLEtBQUssR0FBVyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO1lBQ3ZHLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLEVBQUU7Z0JBQ3JHLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRVMsbURBQTJCLEdBQXJDLFVBQXNDLFdBQW1CLEVBQUUsVUFBa0IsRUFBRSxPQUFvQixFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsVUFBbUIsRUFBRSxjQUEyQjtRQUNoTCxJQUFJLENBQUMsMkJBQTJCLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2pJLENBQUM7SUFFUyxpREFBeUIsR0FBbkMsVUFBb0MsV0FBbUIsRUFBRSxVQUFrQixFQUFFLE9BQW9CLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxVQUFtQixFQUFFLGNBQTJCO1FBQzlLLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDOUgsQ0FBQztJQUVTLG1EQUEyQixHQUFyQyxVQUFzQyxXQUFtQixFQUFFLFVBQWtCLEVBQUUsT0FBb0IsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLFdBQW1CLEVBQUUsUUFBUSxFQUFFLFVBQW1CLEVBQUUsY0FBMkI7UUFBak4saUJBd0JDO1FBdkJBLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3pDLGFBQWEsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRXRJLElBQ0MsQ0FBQyxRQUFRLElBQUksV0FBVyxLQUFLLElBQUksQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxXQUFXLEtBQUssQ0FBQyxDQUFDLEVBQy9CO2dCQUNELElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtvQkFDM0IsY0FBYyxFQUFFLENBQUM7aUJBQ2pCO2FBQ0Q7aUJBQU07Z0JBQ04sSUFBSSxRQUFRLEVBQUU7b0JBQ2IsV0FBVyxFQUFFLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ04sV0FBVyxFQUFFLENBQUM7aUJBQ2Q7Z0JBRUQsVUFBVSxDQUNULGNBQU0sT0FBQSxDQUFDLEtBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDLEVBQXBJLENBQW9JLEVBQ3hJLEtBQUssQ0FDUCxDQUFDO2FBQ0Y7U0FDRDtJQUNGLENBQUM7SUFFZ0IsaUNBQW1CLEdBQXBDLFVBQXFDLFVBQWtCO1FBQ3RELElBQU0saUJBQWlCLEdBQWEsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxRCxJQUFNLFdBQVcsR0FBaUIsRUFBRSxDQUFDO1FBRXJDLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xELElBQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzdDLElBQU0sS0FBSyxHQUFHO3dCQUNiLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN6QyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDekMsQ0FBQztvQkFDRixJQUFJLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO3dCQUNyQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztxQkFDeEI7b0JBRUQsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztpQkFDdEQ7YUFDRDtTQUNEO2FBQU07WUFDTixLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDckI7UUFFRCxPQUFPLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRCxDQUFDO0lBRWdCLDhCQUFnQixHQUFqQyxVQUFrQyxJQUFZLEVBQUUsTUFBYztRQUM3RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRWdCLHdCQUFVLEdBQTNCLFVBQTRCLElBQVksRUFBRSxNQUFjLEVBQUUsRUFBVTtRQUNuRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzlDLElBQUksVUFBVSxHQUFXLENBQUMsQ0FBQztZQUMzQixJQUFJLFFBQVEsR0FBVyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDO1lBRWxCLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDZCxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDOUQsQ0FBQyxFQUFFLENBQUM7YUFDSjtZQUVELFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRXRHLE9BQU87Z0JBQ04sVUFBVTtnQkFDVixRQUFRO2FBQ1IsQ0FBQztTQUNGO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQztTQUNaO0lBQ0YsQ0FBQztJQUVnQiwrQkFBaUIsR0FBbEMsVUFBbUMsTUFBZ0IsRUFBRSxNQUFnQjtRQUNwRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFZ0IsMkJBQWEsR0FBOUIsVUFBK0IsVUFBc0I7UUFDcEQsSUFBSSxNQUFNLEdBQVcsR0FBRyxDQUFDO1FBRXpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNDLE1BQU0sSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRTtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUVnQix3QkFBVSxHQUEzQixVQUE0QixLQUFlO1FBQzFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDakUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztRQUVqRSxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFZ0Isc0NBQXdCLEdBQXpDLFVBQTBDLFVBQXNCLEVBQUUsTUFBYztRQUMvRSxJQUFJLGFBQWEsR0FBVyxDQUFDLENBQUM7UUFDOUIsSUFBTSxhQUFhLEdBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLGFBQWEsSUFBSSxpQkFBaUIsQ0FBQztZQUNuQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWxDLElBQUksYUFBYSxJQUFJLE1BQU0sRUFBRTtnQkFDNUIsSUFBTSxhQUFhLEdBQUcsTUFBTSxHQUFHLGlCQUFpQixHQUFHLGFBQWEsQ0FBQztnQkFDakUsSUFBTSxrQkFBa0IsR0FBRyxhQUFhLEdBQUcsaUJBQWlCLENBQUM7Z0JBRTdELGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUNsQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO29CQUN2RixVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO2lCQUN2RixDQUFDLENBQUM7Z0JBQ0gsTUFBTTthQUNOO1NBQ0Q7UUFFRCxPQUFPLGFBQWEsQ0FBQztJQUN0QixDQUFDO0lBRWdCLHdDQUEwQixHQUEzQyxVQUE0QyxnQkFBd0IsRUFBRSxZQUFvQjtRQUN6RixJQUFNLGFBQWEsR0FBVyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBSSxvQkFBb0IsR0FBVyxDQUFDLENBQUM7UUFDckMsSUFBSSx1QkFBdUIsR0FBVyxFQUFFLENBQUM7UUFFekMsSUFBSSxZQUFZLEdBQUcsYUFBYSxHQUFHLENBQUMsRUFBRTtZQUNyQyxvQkFBb0IsR0FBRyxZQUFZLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQztTQUN4RDtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5Qyx1QkFBdUIsSUFBSSxNQUFNLENBQUM7U0FDbEM7UUFFRCxPQUFPLHVCQUF1QixDQUFDO0lBQ2hDLENBQUM7SUFFYSw4QkFBZ0IsR0FBOUIsVUFBK0IsVUFBc0IsRUFBRSxZQUFvQixFQUFFLFVBQWtCLEVBQUUsT0FBb0IsRUFBRSxNQUFjO1FBQ3BJLElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksR0FBRyxFQUFFO1lBQ2pDLElBQU0sUUFBTSxHQUFXLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztZQUNyRSxJQUFNLGFBQWEsR0FBZSxJQUFJLENBQUMsd0JBQXdCLENBQUMsVUFBVSxFQUFFLFFBQU0sQ0FBQyxDQUFDO1lBQ3BGLElBQUksU0FBUyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUN6RSxJQUFJLFVBQVUsR0FBVyxFQUFFLENBQUM7WUFFNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzlDLFVBQVUsSUFBSSxVQUFVLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztnQkFDMUMsVUFBVSxJQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFHLENBQUM7YUFDOUQ7WUFFRCxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZCLFVBQVUsR0FBRyxLQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxTQUFJLFVBQVksQ0FBQzthQUN2RztpQkFBTTtnQkFDTixVQUFVLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4SDtZQUVELE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3RDLE9BQU8sVUFBVSxDQUFDO1NBQ2xCO0lBQ0YsQ0FBQztJQUNGLG9CQUFDO0FBQUQsQ0FBQyxBQTlTRCxJQThTQyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNsYXNzIExpbmVTdmdNb3Rpb24ge1xuXHRwcm90ZWN0ZWQgbGluZUFuaW1hdGlvbnM6IHN5bWJvbFtdID0gW107XG5cblx0Y29uc3RydWN0b3IoKSB7IH1cblxuXHRwdWJsaWMgZ2V0TGluZUFuaW1hdGlvbnMoKTogc3ltYm9sW10ge1xuXHRcdHJldHVybiB0aGlzLmxpbmVBbmltYXRpb25zO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBkcmF3TGluZUdyb3VwVG9Wb2x1bWUoZEF0dHJpYnV0ZTogc3RyaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdm9sdW1lOiBudW1iZXIsIHJldmVyc2U6IGJvb2xlYW4gPSBmYWxzZSk6IHN0cmluZyB7XG5cdFx0Y29uc3QgcG9pbnRHcm91cHM6IG51bWJlcltdW11bXSA9IHRoaXMuZ2VuZXJhdGVQb2ludEdyb3VwcyhkQXR0cmlidXRlKTtcblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRHcm91cHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdHBvaW50R3JvdXBzW2ldID0gcG9pbnRHcm91cHNbaV0ucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRkQXR0cmlidXRlID0gdGhpcy5kcmF3TGluZVRvVm9sdW1lKHBvaW50R3JvdXBzW2ldLCBpICsgMSwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgdm9sdW1lKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZEF0dHJpYnV0ZTtcblx0fVxuXG5cdHB1YmxpYyBhbmltYXRlTGluZUdyb3VwKFxuXHRcdGRBdHRyaWJ1dGU6IHN0cmluZyxcblx0XHRlbGVtZW50OiBIVE1MRWxlbWVudCxcblx0XHR7XG5cdFx0XHR0aW1lOiB0aW1lID0gMTAwMCxcblx0XHRcdHN0ZXA6IHN0ZXAgPSAxMDAsXG5cdFx0XHRpc1JldmVyc2VkOiBpc1JldmVyc2VkID0gZmFsc2UsXG5cdFx0XHRtb2RlOiBtb2RlID0gJ0VYUEFORCdcblx0XHR9LFxuXHRcdGZpbmlzaENhbGxiYWNrOiAoKSA9PiB2b2lkID0gbnVsbFxuXHQpOiBzeW1ib2wge1xuXHRcdFxuXHRcdG1vZGUgPSBtb2RlLnRvVXBwZXJDYXNlKCk7XG5cdFx0Y29uc3QgbGluZUFuaW1hdGlvbklkOiBzeW1ib2wgPSB0aGlzLnB1c2hOZXdMaW5lQW5pbWF0aW9uKCk7XG5cblx0XHRzd2l0Y2ggKG1vZGUpIHtcblx0XHRcdGNhc2UgJ0NPTExBUFNFJzpcblx0XHRcdFx0dGhpcy5oYW5kbGVBbmltYXRpb25Db2xsYXBzZU1vZGUobGluZUFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCB0aW1lLCBpc1JldmVyc2VkLCBmaW5pc2hDYWxsYmFjayk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMT0FESU5HJzpcblx0XHRcdFx0dGhpcy5oYW5kbGVBbmltYXRpb25Mb2FkaW5nTW9kZShsaW5lQW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHRpbWUsIGlzUmV2ZXJzZWQpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTE9BRElORzInOlxuXHRcdFx0XHR0aGlzLmhhbmRsZUFuaW1hdGlvbkxvYWRpbmcyTW9kZShsaW5lQW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHRpbWUsIGlzUmV2ZXJzZWQpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTE9BRElORzMnOlxuXHRcdFx0XHR0aGlzLmhhbmRsZUFuaW1hdGlvbkxvYWRpbmczTW9kZShsaW5lQW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHRpbWUsIGlzUmV2ZXJzZWQpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTE9BRElORzQnOlxuXHRcdFx0XHR0aGlzLmhhbmRsZUFuaW1hdGlvbkxvYWRpbmc0TW9kZShsaW5lQW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHRpbWUsIGlzUmV2ZXJzZWQpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhpcy5oYW5kbGVBbmltYXRpb25Ob3JtYWxNb2RlKGxpbmVBbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgdGltZSwgaXNSZXZlcnNlZCwgZmluaXNoQ2FsbGJhY2spO1xuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cblx0XHRyZXR1cm4gbGluZUFuaW1hdGlvbklkO1xuXHR9XG5cblxuXHRwcm90ZWN0ZWQgY2FsY01vdGlvblRyaWdvbm9tZXRyaWNFcXVhdGlvbnMoeDogbnVtYmVyKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gTWF0aC5zaW4oKE1hdGguUEkgLyAyKSAqIE1hdGgucG93KHgsIDYpKTtcblx0fVxuXG5cblx0cHJvdGVjdGVkIGdlbmVyYXRlTGluZUFuaW1hdGlvbklkKCk6IHN5bWJvbCB7XG5cdFx0cmV0dXJuIFN5bWJvbCgpO1xuXHR9XG5cblx0cHJvdGVjdGVkIHJlbW92ZUxpbmVBbmltYXRpb24oaWQ6IHN5bWJvbCkge1xuXHRcdGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLmxpbmVBbmltYXRpb25zLmluZGV4T2YoaWQpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMubGluZUFuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgZXhpc3RMaW5lQW5pbWF0aW9uKGlkOiBzeW1ib2wpIHtcblx0XHRyZXR1cm4gdGhpcy5saW5lQW5pbWF0aW9ucy5pbmRleE9mKGlkKSAhPT0gLTE7XG5cdH1cblxuXHRwcm90ZWN0ZWQgcHVzaE5ld0xpbmVBbmltYXRpb24oKTogc3ltYm9sIHtcblx0XHRjb25zdCBrZXk6IHN5bWJvbCA9IHRoaXMuZ2VuZXJhdGVMaW5lQW5pbWF0aW9uSWQoKTtcblxuXHRcdHRoaXMubGluZUFuaW1hdGlvbnMucHVzaChrZXkpO1xuXG5cdFx0cmV0dXJuIGtleTtcblx0fVxuXG5cdHByb3RlY3RlZCBoYW5kbGVBbmltYXRpb25Mb2FkaW5nTW9kZShhbmltYXRpb25JZDogc3ltYm9sLCBkQXR0cmlidXRlOiBzdHJpbmcsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdGVwOiBudW1iZXIsIHRpbWU6IG51bWJlciwgaXNSZXZlcnNlZDogYm9vbGVhbikge1xuXHRcdGNvbnN0IHNwZWVkOiBudW1iZXIgPSB0aW1lIC8gc3RlcDtcblx0XHR0aGlzLnJlY3Vyc2l2ZUFuaW1hdGlvbkxpbmVHcm91cChhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgc3BlZWQsIDAsIHRydWUsIGlzUmV2ZXJzZWQsICgpID0+IHtcblx0XHRcdHRoaXMucmVjdXJzaXZlQW5pbWF0aW9uTGluZUdyb3VwKGFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCBzcGVlZCwgMTAwLCBmYWxzZSwgIWlzUmV2ZXJzZWQsICgpID0+IHtcblx0XHRcdFx0dGhpcy5oYW5kbGVBbmltYXRpb25Mb2FkaW5nTW9kZShhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgdGltZSwgaXNSZXZlcnNlZCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHByb3RlY3RlZCBoYW5kbGVBbmltYXRpb25Mb2FkaW5nMk1vZGUoYW5pbWF0aW9uSWQ6IHN5bWJvbCwgZEF0dHJpYnV0ZTogc3RyaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgc3RlcDogbnVtYmVyLCB0aW1lOiBudW1iZXIsIGlzUmV2ZXJzZWQ6IGJvb2xlYW4pIHtcblx0XHRjb25zdCBzcGVlZDogbnVtYmVyID0gdGltZSAvIHN0ZXA7XG5cdFx0dGhpcy5yZWN1cnNpdmVBbmltYXRpb25MaW5lR3JvdXAoYW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHNwZWVkLCAwLCB0cnVlLCBpc1JldmVyc2VkLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnJlY3Vyc2l2ZUFuaW1hdGlvbkxpbmVHcm91cChhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgc3BlZWQsIDEwMCwgZmFsc2UsIGlzUmV2ZXJzZWQsICgpID0+IHtcblx0XHRcdFx0dGhpcy5oYW5kbGVBbmltYXRpb25Mb2FkaW5nMk1vZGUoYW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHRpbWUsIGlzUmV2ZXJzZWQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcm90ZWN0ZWQgaGFuZGxlQW5pbWF0aW9uTG9hZGluZzNNb2RlKGFuaW1hdGlvbklkOiBzeW1ib2wsIGRBdHRyaWJ1dGU6IHN0cmluZywgZWxlbWVudDogSFRNTEVsZW1lbnQsIHN0ZXA6IG51bWJlciwgdGltZTogbnVtYmVyLCBpc1JldmVyc2VkOiBib29sZWFuKSB7XG5cdFx0Y29uc3Qgc3BlZWQ6IG51bWJlciA9IHRpbWUgLyBzdGVwO1xuXHRcdHRoaXMucmVjdXJzaXZlQW5pbWF0aW9uTGluZUdyb3VwKGFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCBzcGVlZCwgMTAwLCBmYWxzZSwgIWlzUmV2ZXJzZWQsICgpID0+IHtcblx0XHRcdHRoaXMucmVjdXJzaXZlQW5pbWF0aW9uTGluZUdyb3VwKGFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCBzcGVlZCwgMCwgdHJ1ZSwgaXNSZXZlcnNlZCwgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmhhbmRsZUFuaW1hdGlvbkxvYWRpbmczTW9kZShhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgdGltZSwgaXNSZXZlcnNlZCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHByb3RlY3RlZCBoYW5kbGVBbmltYXRpb25Mb2FkaW5nNE1vZGUoYW5pbWF0aW9uSWQ6IHN5bWJvbCwgZEF0dHJpYnV0ZTogc3RyaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgc3RlcDogbnVtYmVyLCB0aW1lOiBudW1iZXIsIGlzUmV2ZXJzZWQ6IGJvb2xlYW4pIHtcblx0XHRjb25zdCBzcGVlZDogbnVtYmVyID0gdGltZSAvIHN0ZXA7XG5cdFx0dGhpcy5yZWN1cnNpdmVBbmltYXRpb25MaW5lR3JvdXAoYW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsIHNwZWVkLCAxMDAsIGZhbHNlLCBpc1JldmVyc2VkLCAoKSA9PiB7XG5cdFx0XHR0aGlzLnJlY3Vyc2l2ZUFuaW1hdGlvbkxpbmVHcm91cChhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgc3BlZWQsIDAsIHRydWUsICFpc1JldmVyc2VkLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuaGFuZGxlQW5pbWF0aW9uTG9hZGluZzRNb2RlKGFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCB0aW1lLCBpc1JldmVyc2VkKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJvdGVjdGVkIGhhbmRsZUFuaW1hdGlvbkNvbGxhcHNlTW9kZShhbmltYXRpb25JZDogc3ltYm9sLCBkQXR0cmlidXRlOiBzdHJpbmcsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdGVwOiBudW1iZXIsIHRpbWU6IG51bWJlciwgaXNSZXZlcnNlZDogYm9vbGVhbiwgZmluaXNoQ2FsbGJhY2s/OiAoKSA9PiB2b2lkKSB7XG5cdFx0dGhpcy5yZWN1cnNpdmVBbmltYXRpb25MaW5lR3JvdXAoYW5pbWF0aW9uSWQsIGRBdHRyaWJ1dGUsIGVsZW1lbnQsIHN0ZXAsICh0aW1lIC8gc3RlcCksIDEwMCwgZmFsc2UsIGlzUmV2ZXJzZWQsIGZpbmlzaENhbGxiYWNrKTtcblx0fVxuXG5cdHByb3RlY3RlZCBoYW5kbGVBbmltYXRpb25Ob3JtYWxNb2RlKGFuaW1hdGlvbklkOiBzeW1ib2wsIGRBdHRyaWJ1dGU6IHN0cmluZywgZWxlbWVudDogSFRNTEVsZW1lbnQsIHN0ZXA6IG51bWJlciwgdGltZTogbnVtYmVyLCBpc1JldmVyc2VkOiBib29sZWFuLCBmaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcblx0XHR0aGlzLnJlY3Vyc2l2ZUFuaW1hdGlvbkxpbmVHcm91cChhbmltYXRpb25JZCwgZEF0dHJpYnV0ZSwgZWxlbWVudCwgc3RlcCwgKHRpbWUgLyBzdGVwKSwgMCwgdHJ1ZSwgaXNSZXZlcnNlZCwgZmluaXNoQ2FsbGJhY2spO1xuXHR9XG5cblx0cHJvdGVjdGVkIHJlY3Vyc2l2ZUFuaW1hdGlvbkxpbmVHcm91cChhbmltYXRpb25JZDogc3ltYm9sLCBkQXR0cmlidXRlOiBzdHJpbmcsIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdGVwOiBudW1iZXIsIHNwZWVkOiBudW1iZXIsIGN1cnJlbnRTdGVwOiBudW1iZXIsIGlzRXhwYW5kLCBpc1JldmVyc2VkOiBib29sZWFuLCBmaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWQpIHtcblx0XHRpZiAodGhpcy5leGlzdExpbmVBbmltYXRpb24oYW5pbWF0aW9uSWQpKSB7XG5cdFx0XHRMaW5lU3ZnTW90aW9uLmRyYXdMaW5lR3JvdXBUb1ZvbHVtZShkQXR0cmlidXRlLCBlbGVtZW50LCAxMDAgKiB0aGlzLmNhbGNNb3Rpb25Ucmlnb25vbWV0cmljRXF1YXRpb25zKGN1cnJlbnRTdGVwIC8gc3RlcCksIGlzUmV2ZXJzZWQpO1xuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdChpc0V4cGFuZCAmJiBjdXJyZW50U3RlcCA9PT0gc3RlcCkgfHxcblx0XHRcdFx0KCFpc0V4cGFuZCAmJiBjdXJyZW50U3RlcCA9PT0gMClcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoZmluaXNoQ2FsbGJhY2sgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGZpbmlzaENhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChpc0V4cGFuZCkge1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVwKys7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZXAtLTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNldFRpbWVvdXQoXG5cdFx0XHRcdFx0KCkgPT4gKHRoaXMucmVjdXJzaXZlQW5pbWF0aW9uTGluZUdyb3VwKGFuaW1hdGlvbklkLCBkQXR0cmlidXRlLCBlbGVtZW50LCBzdGVwLCBzcGVlZCwgY3VycmVudFN0ZXAsIGlzRXhwYW5kLCBpc1JldmVyc2VkLCBmaW5pc2hDYWxsYmFjaykpXG5cdFx0XHRcdFx0LCBzcGVlZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByb3RlY3RlZCBzdGF0aWMgZ2VuZXJhdGVQb2ludEdyb3VwcyhkQXR0cmlidXRlOiBzdHJpbmcpOiBudWxsIHwgbnVtYmVyW11bXVtdIHtcblx0XHRjb25zdCBwb2ludEdyb3VwU3RyaW5nczogc3RyaW5nW10gPSBkQXR0cmlidXRlLnNwbGl0KFwiTVwiKTtcblx0XHRjb25zdCBwb2ludEdyb3VwczogbnVtYmVyW11bXVtdID0gW107XG5cblx0XHRpZiAocG9pbnRHcm91cFN0cmluZ3NbMF0gPT09IFwiXCIpIHtcblx0XHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRHcm91cFN0cmluZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgcG9pbnRTdHJpbmdzID0gcG9pbnRHcm91cFN0cmluZ3NbaV0uc3BsaXQoXCJMXCIpO1xuXG5cdFx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgcG9pbnRTdHJpbmdzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0Y29uc3QgcG9pbnQgPSBbXG5cdFx0XHRcdFx0XHRwYXJzZUZsb2F0KHBvaW50U3RyaW5nc1tqXS5zcGxpdChcIixcIilbMF0pLFxuXHRcdFx0XHRcdFx0cGFyc2VGbG9hdChwb2ludFN0cmluZ3Nbal0uc3BsaXQoXCIsXCIpWzFdKSxcblx0XHRcdFx0XHRdO1xuXHRcdFx0XHRcdGlmIChwb2ludEdyb3Vwc1tpIC0gMV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cG9pbnRHcm91cHNbaSAtIDFdID0gW107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cG9pbnRHcm91cHNbaSAtIDFdW3BvaW50R3JvdXBzW2kgLSAxXS5sZW5ndGhdID0gcG9pbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0YWxlcnQoXCJub3QgZm91bmQgTVwiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRHcm91cHMubGVuZ3RoID4gMCA/IHBvaW50R3JvdXBzIDogbnVsbDtcblx0fVxuXG5cdHByb3RlY3RlZCBzdGF0aWMgY291bnRPY2N1cnJlbmNlcyh0ZXh0OiBzdHJpbmcsIHNlYXJjaDogc3RyaW5nKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gdGV4dC5zcGxpdChzZWFyY2gpLmxlbmd0aCAtIDE7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc3RhdGljIGdldFJhbmdlT2YodGV4dDogc3RyaW5nLCBzZWFyY2g6IHN0cmluZywgbm86IG51bWJlcik6IG51bWJlcltdIHwgbnVsbCB7XG5cdFx0aWYgKHRoaXMuY291bnRPY2N1cnJlbmNlcyh0ZXh0LCBzZWFyY2gpID49IG5vKSB7XG5cdFx0XHRsZXQgc3RhcnRJbmRleDogbnVtYmVyID0gMDtcblx0XHRcdGxldCBlbmRJbmRleDogbnVtYmVyID0gMDtcblx0XHRcdGxldCBuOiBudW1iZXIgPSAwO1xuXG5cdFx0XHR3aGlsZSAobiA8IG5vKSB7XG5cdFx0XHRcdHN0YXJ0SW5kZXggPSB0ZXh0LmluZGV4T2Yoc2VhcmNoLCBzdGFydEluZGV4KSArIHNlYXJjaC5sZW5ndGg7XG5cdFx0XHRcdG4rKztcblx0XHRcdH1cblxuXHRcdFx0ZW5kSW5kZXggPSAodGV4dC5pbmRleE9mKHNlYXJjaCwgc3RhcnRJbmRleCkgPT09IC0xKSA/IHRleHQubGVuZ3RoIDogdGV4dC5pbmRleE9mKHNlYXJjaCwgc3RhcnRJbmRleCk7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdHN0YXJ0SW5kZXgsXG5cdFx0XHRcdGVuZEluZGV4XG5cdFx0XHRdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwcm90ZWN0ZWQgc3RhdGljIGdldFBvaW50c0Rpc3RhbmNlKHBvaW50MTogbnVtYmVyW10sIHBvaW50MjogbnVtYmVyW10pOiBudW1iZXIge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnQyWzBdIC0gcG9pbnQxWzBdLCAyKSArIE1hdGgucG93KHBvaW50MlsxXSAtIHBvaW50MVsxXSwgMikpO1xuXHR9XG5cblx0cHJvdGVjdGVkIHN0YXRpYyBnZXRMaW5lTGVuZ3RoKHBvaW50R3JvdXA6IG51bWJlcltdW10pOiBudW1iZXIge1xuXHRcdGxldCBsZW5ndGg6IG51bWJlciA9IDAuMDtcblxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRHcm91cC5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGVuZ3RoICs9IHRoaXMuZ2V0UG9pbnRzRGlzdGFuY2UocG9pbnRHcm91cFtpIC0gMV0sIHBvaW50R3JvdXBbaV0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW5ndGg7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc3RhdGljIHJvdW5kUG9pbnQocG9pbnQ6IG51bWJlcltdKTogbnVtYmVyW10ge1xuXHRcdHBvaW50WzBdID0gTWF0aC5yb3VuZCgocG9pbnRbMF0gKyBOdW1iZXIuRVBTSUxPTikgKiAxMDAwKSAvIDEwMDA7XG5cdFx0cG9pbnRbMV0gPSBNYXRoLnJvdW5kKChwb2ludFsxXSArIE51bWJlci5FUFNJTE9OKSAqIDEwMDApIC8gMTAwMDtcblxuXHRcdHJldHVybiBwb2ludDtcblx0fVxuXG5cdHByb3RlY3RlZCBzdGF0aWMgY2hhbmdlUG9pbnRHcm91cEF0TGVuZ3RoKHBvaW50R3JvdXA6IG51bWJlcltdW10sIGxlbmd0aDogbnVtYmVyKTogbnVtYmVyW11bXSB7XG5cdFx0bGV0IGN1cnJlbnRMZW5ndGg6IG51bWJlciA9IDA7XG5cdFx0Y29uc3QgbmV3UG9pbnRHcm91cDogbnVtYmVyW11bXSA9IFtwb2ludEdyb3VwWzBdXTtcblxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRHcm91cC5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgY3VycmVudExpbmVMZW5ndGggPSB0aGlzLmdldFBvaW50c0Rpc3RhbmNlKHBvaW50R3JvdXBbaSAtIDFdLCBwb2ludEdyb3VwW2ldKTtcblx0XHRcdGN1cnJlbnRMZW5ndGggKz0gY3VycmVudExpbmVMZW5ndGg7XG5cdFx0XHRuZXdQb2ludEdyb3VwLnB1c2gocG9pbnRHcm91cFtpXSk7XG5cblx0XHRcdGlmIChjdXJyZW50TGVuZ3RoID49IGxlbmd0aCkge1xuXHRcdFx0XHRjb25zdCBuZXdMaW5lTGVuZ3RoID0gbGVuZ3RoICsgY3VycmVudExpbmVMZW5ndGggLSBjdXJyZW50TGVuZ3RoO1xuXHRcdFx0XHRjb25zdCBiZXR3ZWVuTGVuZ3RoUmF0aW8gPSBuZXdMaW5lTGVuZ3RoIC8gY3VycmVudExpbmVMZW5ndGg7XG5cblx0XHRcdFx0bmV3UG9pbnRHcm91cFtpXSA9IHRoaXMucm91bmRQb2ludChbXG5cdFx0XHRcdFx0cG9pbnRHcm91cFtpIC0gMV1bMF0gKyAoKHBvaW50R3JvdXBbaV1bMF0gLSBwb2ludEdyb3VwW2kgLSAxXVswXSkgKiBiZXR3ZWVuTGVuZ3RoUmF0aW8pLFxuXHRcdFx0XHRcdHBvaW50R3JvdXBbaSAtIDFdWzFdICsgKChwb2ludEdyb3VwW2ldWzFdIC0gcG9pbnRHcm91cFtpIC0gMV1bMV0pICogYmV0d2Vlbkxlbmd0aFJhdGlvKVxuXHRcdFx0XHRdKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ld1BvaW50R3JvdXA7XG5cdH1cblxuXHRwcm90ZWN0ZWQgc3RhdGljIGdldFBvaW50R3JvdXBTdHJpbmdNaXNzaW5nKHBvaW50R3JvdXBTdHJpbmc6IHN0cmluZywgcG9pbnRHcm91cE5vOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGNvbnN0IHBvaW50R3JvdXBOdW06IG51bWJlciA9IHRoaXMuY291bnRPY2N1cnJlbmNlcyhwb2ludEdyb3VwU3RyaW5nLCAnTScpO1xuXHRcdGxldCBwb2ludEdyb3VwTWlzc2luZ051bTogbnVtYmVyID0gMDtcblx0XHRsZXQgcG9pbnRHcm91cE1pc3NpbmdTdHJpbmc6IHN0cmluZyA9ICcnO1xuXG5cdFx0aWYgKHBvaW50R3JvdXBObyAtIHBvaW50R3JvdXBOdW0gPiAxKSB7XG5cdFx0XHRwb2ludEdyb3VwTWlzc2luZ051bSA9IHBvaW50R3JvdXBObyAtIHBvaW50R3JvdXBOdW0gLSAxO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRHcm91cE1pc3NpbmdOdW07IGkrKykge1xuXHRcdFx0cG9pbnRHcm91cE1pc3NpbmdTdHJpbmcgKz0gJ00wLDAnO1xuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludEdyb3VwTWlzc2luZ1N0cmluZztcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZHJhd0xpbmVUb1ZvbHVtZShwb2ludEdyb3VwOiBudW1iZXJbXVtdLCBwb2ludEdyb3VwTm86IG51bWJlciwgZEF0dHJpYnV0ZTogc3RyaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdm9sdW1lOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGlmICh2b2x1bWUgPj0gMCAmJiB2b2x1bWUgPD0gMTAwKSB7XG5cdFx0XHRjb25zdCBsZW5ndGg6IG51bWJlciA9IHRoaXMuZ2V0TGluZUxlbmd0aChwb2ludEdyb3VwKSAvIDEwMCAqIHZvbHVtZTtcblx0XHRcdGNvbnN0IG5ld1BvaW50R3JvdXA6IG51bWJlcltdW10gPSB0aGlzLmNoYW5nZVBvaW50R3JvdXBBdExlbmd0aChwb2ludEdyb3VwLCBsZW5ndGgpO1xuXHRcdFx0bGV0IHdvcmtSYW5nZTogbnVtYmVyW10gPSB0aGlzLmdldFJhbmdlT2YoZEF0dHJpYnV0ZSwgJ00nLCBwb2ludEdyb3VwTm8pO1xuXHRcdFx0bGV0IGxpbmVTdHJpbmc6IHN0cmluZyA9ICcnO1xuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5ld1BvaW50R3JvdXAubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGluZVN0cmluZyArPSBsaW5lU3RyaW5nID09ICcnID8gJycgOiAnTCc7XG5cdFx0XHRcdGxpbmVTdHJpbmcgKz0gYCR7bmV3UG9pbnRHcm91cFtpXVswXX0sJHtuZXdQb2ludEdyb3VwW2ldWzFdfWA7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh3b3JrUmFuZ2UgPT09IG51bGwpIHtcblx0XHRcdFx0ZEF0dHJpYnV0ZSA9IGAke2RBdHRyaWJ1dGV9JHt0aGlzLmdldFBvaW50R3JvdXBTdHJpbmdNaXNzaW5nKGRBdHRyaWJ1dGUsIHBvaW50R3JvdXBObyl9TSR7bGluZVN0cmluZ31gO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZEF0dHJpYnV0ZSA9IGRBdHRyaWJ1dGUuc3Vic3RyaW5nKDAsIHdvcmtSYW5nZVswXSkgKyBsaW5lU3RyaW5nICsgZEF0dHJpYnV0ZS5zdWJzdHJpbmcod29ya1JhbmdlWzFdLCBkQXR0cmlidXRlLmxlbmd0aCk7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkJywgZEF0dHJpYnV0ZSk7XG5cdFx0XHRyZXR1cm4gZEF0dHJpYnV0ZTtcblx0XHR9XG5cdH1cbn1cbiJdfQ==